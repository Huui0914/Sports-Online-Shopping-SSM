/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2024-12-22 08:19:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.users;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class usermenu_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1709948090000L));
    _jspx_dependants.put("jar:file:/D:/EclipseSSM/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ssm_project/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1054243570000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String path = request.getContextPath();
	String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path + "/";

      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	/* 外层容器样式 */\r\n");
      out.write("	.userInfo-box {\r\n");
      out.write("	    width: 80%;\r\n");
      out.write("	    margin: 20px auto;\r\n");
      out.write("	    padding: 20px;\r\n");
      out.write("	    border: 1px solid #ddd;\r\n");
      out.write("	    border-radius: 8px;\r\n");
      out.write("	    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n");
      out.write("	    background-color: #fff;\r\n");
      out.write("	    font-family: Arial, sans-serif;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 用户信息菜单整体布局 */\r\n");
      out.write("	.userInfoMenu {\r\n");
      out.write("	    display: flex;\r\n");
      out.write("	    flex-wrap: wrap; /* 支持多行布局 */\r\n");
      out.write("	    gap: 15px; /* 设置菜单项之间的间距 */\r\n");
      out.write("	    justify-content: flex-start; /* 子项靠左对齐 */\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 用户菜单项样式：图片和文字按行排列 */\r\n");
      out.write("	.userInfoMenu a {\r\n");
      out.write("		width:100%;\r\n");
      out.write("	    display: flex;\r\n");
      out.write("	    flex-direction: row; /* 垂直排列 */\r\n");
      out.write("	    align-items: center; /* 居中对齐 */\r\n");
      out.write("	    color: #555;\r\n");
      out.write("	    font-size: 16px;\r\n");
      out.write("	    font-weight: bold;\r\n");
      out.write("	    border: 1px solid #ddd;\r\n");
      out.write("	    border-radius: 8px;\r\n");
      out.write("	    transition: all 0.3s ease;\r\n");
      out.write("	    background-color: #f9f9f9;\r\n");
      out.write("	    text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 用户菜单项图标样式 */\r\n");
      out.write("	.userInfoMenu a img {\r\n");
      out.write("	    width: 20px; /* 设置图标大小 */\r\n");
      out.write("	    height: 20px;\r\n");
      out.write("	    margin-left: 10px; /* 图标和文字之间的间距 */\r\n");
      out.write("	    transition: transform 0.3s ease;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 段落文字样式 */\r\n");
      out.write("	.userInfoMenu a p {\r\n");
      out.write("	    width: 100%; /* 占满一行 */\r\n");
      out.write("	    text-align: center; /* 居中对齐文字 */\r\n");
      out.write("	    margin: 0; /* 去除默认外边距 */\r\n");
      out.write("	    line-height: 2; /* 设置合适的行高 */\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 鼠标悬停效果 */\r\n");
      out.write("	.userInfoMenu a:hover {\r\n");
      out.write("	    color: #fff;\r\n");
      out.write("	    background-color: #EDCDEE;\r\n");
      out.write("	    border-color: #EDCDEE;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	.userInfoMenu a:last-child img {\r\n");
      out.write("	    vertical-align: middle;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/* 响应式支持 */\r\n");
      out.write("	@media (max-width: 768px) {\r\n");
      out.write("	    .userInfoMenu a {\r\n");
      out.write("	        width: calc(50% - 15px); /* 两列布局 */\r\n");
      out.write("	        font-size: 14px;\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	@media (max-width: 480px) {\r\n");
      out.write("	    .userInfoMenu a {\r\n");
      out.write("	        width: 100%; /* 单列布局 */\r\n");
      out.write("	        font-size: 14px;\r\n");
      out.write("	    }\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"userInfo-box\">\r\n");
      out.write("				<div class=\"user-box\">\r\n");
      out.write("					<div class=\"userCenterInfo\">\r\n");
      out.write("						<div class=\"userInfoMenu\">\r\n");
      out.write("							<a href=\"index/userinfo.action\">\r\n");
      out.write("								<img src=\"asset/images/userimg.png\" />\r\n");
      out.write("								<p>用户信息</p>\r\n");
      out.write("							</a> \r\n");
      out.write("							<a href=\"index/prePwd.action\"><img src=\"asset/images/fileImg.png\" /><p>修改密码</p></a> \r\n");
      out.write("							<a href=\"index/showOrders.action\"><img src=\"asset/images/fileImg.png\" /><p>我的订单</p></a> \r\n");
      out.write("							<a href=\"index/preComplains.action\"><img src=\"asset/images/fileImg.png\" /><p>意见反馈</p></a> \r\n");
      out.write("							<a href=\"index/myComplains.action\"><img src=\"asset/images/fileImg.png\" /><p>我的意见反馈</p></a> \r\n");
      out.write("							<a href=\"index/exit.action\">\r\n");
      out.write("								<p>安全退出</p>\r\n");
      out.write("							</a>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
